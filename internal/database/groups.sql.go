// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: groups.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO GROUPS (id, created_at, updated_at, name)
    VALUES (gen_random_uuid (), NOW(), NOW(), $1)
RETURNING
    id, created_at, updated_at, name
`

func (q *Queries) CreateGroup(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getGroupsByUser = `-- name: GetGroupsByUser :many
SELECT
    id,
    name,
    created_at
FROM
    GROUPS
    JOIN group_members ON groups.id = group_members.group_id
WHERE
    user_id = $1
`

type GetGroupsByUserRow struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
}

func (q *Queries) GetGroupsByUser(ctx context.Context, userID uuid.NullUUID) ([]GetGroupsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupsByUserRow
	for rows.Next() {
		var i GetGroupsByUserRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByGroup = `-- name: GetUsersByGroup :many
SELECT
    id,
    name
FROM
    users
    JOIN group_members ON users.id = group_members.user_id
WHERE
    group_id = $1
    AND id != $2
`

type GetUsersByGroupParams struct {
	GroupID uuid.NullUUID
	ID      uuid.UUID
}

type GetUsersByGroupRow struct {
	ID   uuid.UUID
	Name sql.NullString
}

func (q *Queries) GetUsersByGroup(ctx context.Context, arg GetUsersByGroupParams) ([]GetUsersByGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByGroup, arg.GroupID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByGroupRow
	for rows.Next() {
		var i GetUsersByGroupRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const joinGroup = `-- name: JoinGroup :one
INSERT INTO group_members (user_id, group_id) VALUES ($1, $2) RETURNING user_id, group_id
`

type JoinGroupParams struct {
	UserID  uuid.NullUUID
	GroupID uuid.NullUUID
}

func (q *Queries) JoinGroup(ctx context.Context, arg JoinGroupParams) (GroupMember, error) {
	row := q.db.QueryRowContext(ctx, joinGroup, arg.UserID, arg.GroupID)
	var i GroupMember
	err := row.Scan(&i.UserID, &i.GroupID)
	return i, err
}
