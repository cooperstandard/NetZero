// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (id, created_at, updated_at, title, description, author_id, group_id, amount)
    VALUES (gen_random_uuid (), NOW(), NOW(), $1, $2, $3, $4, $5)
RETURNING
    id, created_at, updated_at, title, description, author_id, group_id, amount
`

type CreateTransactionParams struct {
	Title       string
	Description sql.NullString
	AuthorID    uuid.NullUUID
	GroupID     uuid.UUID
	Amount      string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Title,
		arg.Description,
		arg.AuthorID,
		arg.GroupID,
		arg.Amount,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.AuthorID,
		&i.GroupID,
		&i.Amount,
	)
	return i, err
}

const getTransactionsByGroup = `-- name: GetTransactionsByGroup :many
SELECT
    id, created_at, updated_at, title, description, author_id, group_id, amount
FROM
    transactions
WHERE
    group_id = $1
`

func (q *Queries) GetTransactionsByGroup(ctx context.Context, groupID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.AuthorID,
			&i.GroupID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactonsByAuthor = `-- name: GetTransactonsByAuthor :many
SELECT
    id, created_at, updated_at, title, description, author_id, group_id, amount
FROM
    transactions
WHERE
    author_id = $1
`

func (q *Queries) GetTransactonsByAuthor(ctx context.Context, authorID uuid.NullUUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactonsByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.AuthorID,
			&i.GroupID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
