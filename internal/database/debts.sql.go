// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: debts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDebt = `-- name: CreateDebt :one
INSERT INTO debts (id, amount, transaction_id, debtor, creditor, created_at, updated_at)
    VALUES (gen_new_uuid (), $1, $2, $3, $4, NOW(), NOW())
RETURNING
    id, amount, transaction_id, debtor, creditor, created_at, updated_at, paid
`

type CreateDebtParams struct {
	Amount        string    `json:"amount"`
	TransactionID uuid.UUID `json:"transaction_id"`
	Debtor        uuid.UUID `json:"debtor"`
	Creditor      uuid.UUID `json:"creditor"`
}

func (q *Queries) CreateDebt(ctx context.Context, arg CreateDebtParams) (Debt, error) {
	row := q.db.QueryRowContext(ctx, createDebt,
		arg.Amount,
		arg.TransactionID,
		arg.Debtor,
		arg.Creditor,
	)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.TransactionID,
		&i.Debtor,
		&i.Creditor,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Paid,
	)
	return i, err
}

const getDebtsByCreditor = `-- name: GetDebtsByCreditor :many
SELECT
    id, amount, transaction_id, debtor, creditor, created_at, updated_at, paid
FROM
    debts
WHERE
    $1 = creditor
`

func (q *Queries) GetDebtsByCreditor(ctx context.Context, creditor uuid.UUID) ([]Debt, error) {
	rows, err := q.db.QueryContext(ctx, getDebtsByCreditor, creditor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Debt
	for rows.Next() {
		var i Debt
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.TransactionID,
			&i.Debtor,
			&i.Creditor,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Paid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDebtsByDebtor = `-- name: GetDebtsByDebtor :many
SELECT
    id, amount, transaction_id, debtor, creditor, created_at, updated_at, paid
FROM
    debts
WHERE
    $1 = debtor
`

func (q *Queries) GetDebtsByDebtor(ctx context.Context, debtor uuid.UUID) ([]Debt, error) {
	rows, err := q.db.QueryContext(ctx, getDebtsByDebtor, debtor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Debt
	for rows.Next() {
		var i Debt
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.TransactionID,
			&i.Debtor,
			&i.Creditor,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Paid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDebtsByTransaction = `-- name: GetDebtsByTransaction :many
SELECT
    id, amount, transaction_id, debtor, creditor, created_at, updated_at, paid
FROM
    debts
WHERE
    $1 = transaction_id
`

func (q *Queries) GetDebtsByTransaction(ctx context.Context, transactionID uuid.UUID) ([]Debt, error) {
	rows, err := q.db.QueryContext(ctx, getDebtsByTransaction, transactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Debt
	for rows.Next() {
		var i Debt
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.TransactionID,
			&i.Debtor,
			&i.Creditor,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Paid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const payDebts = `-- name: PayDebts :one
UPDATE
    debts
SET
    paid = TRUE
WHERE
    id = $1
RETURNING
    id, amount, transaction_id, debtor, creditor, created_at, updated_at, paid
`

func (q *Queries) PayDebts(ctx context.Context, id uuid.UUID) (Debt, error) {
	row := q.db.QueryRowContext(ctx, payDebts, id)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.TransactionID,
		&i.Debtor,
		&i.Creditor,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Paid,
	)
	return i, err
}

const payDebtsByTransaction = `-- name: PayDebtsByTransaction :many
UPDATE
    debts
SET
    paid = TRUE
WHERE
    transaction_id = $1
RETURNING
    id, amount, transaction_id, debtor, creditor, created_at, updated_at, paid
`

func (q *Queries) PayDebtsByTransaction(ctx context.Context, transactionID uuid.UUID) ([]Debt, error) {
	rows, err := q.db.QueryContext(ctx, payDebtsByTransaction, transactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Debt
	for rows.Next() {
		var i Debt
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.TransactionID,
			&i.Debtor,
			&i.Creditor,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Paid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
