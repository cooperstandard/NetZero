// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, email, user_id, expires_at)
    VALUES ($1, NOW(), NOW(), $2, $3, $4)
RETURNING
    token, created_at, updated_at, email, user_id, expires_at, revoked_at
`

type CreateTokenParams struct {
	Token     string    `json:"token"`
	Email     string    `json:"email"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.Token,
		arg.Email,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT
    token, created_at, updated_at, email, user_id, expires_at, revoked_at
FROM
    refresh_tokens
WHERE
    token = $1
LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :one
UPDATE
    refresh_tokens
SET
    revoked_at = $1,
    updated_at = NOW()
WHERE
    token = $2
RETURNING
    token, created_at, updated_at, email, user_id, expires_at, revoked_at
`

type RevokeTokenParams struct {
	RevokedAt sql.NullTime `json:"revoked_at"`
	Token     string       `json:"token"`
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeToken, arg.RevokedAt, arg.Token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
